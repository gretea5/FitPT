- name: Install ArgoCD and DevOps tools via Helm
  hosts: controller-etcd-0
  become: true

  tasks:
    - name: Create namespace for ArgoCD
      shell: kubectl create namespace argocd || true

    - name: Install ArgoCD
      shell: |
        KUBECONFIG=/etc/kubernetes/admin.conf \
        kubectl apply --validate=false -n argocd \
        -f https://raw.githubusercontent.com/argoproj/argo-cd/stable/manifests/install.yaml

    - name: Wait for ArgoCD server to be ready
      shell: kubectl rollout status deployment/argocd-server -n argocd
      register: result
      until: result.rc == 0
      retries: 30
      delay: 10

    - name: Install ingress-nginx controller
      shell: kubectl apply -f https://raw.githubusercontent.com/kubernetes/ingress-nginx/controller-v1.10.0/deploy/static/provider/cloud/deploy.yaml

    - name: Patch ingress-nginx to NodePort
      shell: |
        kubectl patch svc ingress-nginx-controller -n ingress-nginx -p '{"spec": {"type": "NodePort"}}'

    - name: Install Helm
      shell: |
        curl https://baltocdn.com/helm/signing.asc | gpg --dearmor | sudo tee /usr/share/keyrings/helm.gpg > /dev/null
        echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/helm.gpg] https://baltocdn.com/helm/stable/debian/ all main" | sudo tee /etc/apt/sources.list.d/helm-stable-debian.list
        apt-get update && apt-get install helm -y
      args:
        creates: /usr/bin/helm

    - name: Add Jetstack Helm repo
      shell: helm repo add jetstack https://charts.jetstack.io && helm repo update

    - name: Install cert-manager
      shell: |
        helm install cert-manager jetstack/cert-manager \
          --namespace cert-manager \
          --create-namespace \
          --version v1.11.0 \
          --set installCRDs=true

    - name: Apply letsencrypt-prod ClusterIssuer
      copy:
        dest: /tmp/letsencrypt-prod.yaml
        content: |
          apiVersion: cert-manager.io/v1
          kind: ClusterIssuer
          metadata:
            name: letsencrypt-prod
          spec:
            acme:
              server: https://acme-v02.api.letsencrypt.org/directory
              email: kkt3289@gmail.com
              privateKeySecretRef:
                name: letsencrypt-prod
              solvers:
                - http01:
                    ingress:
                      class: nginx

    - name: Apply ClusterIssuer
      shell: kubectl apply -f /tmp/letsencrypt-prod.yaml

    - name: Apply ArgoCD ingress
      copy:
        dest: /tmp/argocd-ingress.yaml
        content: |
          apiVersion: networking.k8s.io/v1
          kind: Ingress
          metadata:
            name: argocd-server-ingress
            namespace: argocd
            annotations:
              cert-manager.io/cluster-issuer: letsencrypt-prod
              kubernetes.io/ingress.class: nginx
              kubernetes.io/tls-acme: "true"
              nginx.ingress.kubernetes.io/ssl-passthrough: "true"
              nginx.ingress.kubernetes.io/backend-protocol: "HTTPS"
          spec:
            rules:
              - host: argocd.yourdomain.com
                http:
                  paths:
                    - path: /
                      pathType: Prefix
                      backend:
                        service:
                          name: argocd-server
                          port:
                            name: https
            tls:
              - hosts:
                  - argocd.yourdomain.com
                secretName: argocd-secret

    - name: Apply ArgoCD ingress
      shell: kubectl apply -f /tmp/argocd-ingress.yaml

    - name: Output ArgoCD admin password
      shell: kubectl -n argocd get secret argocd-initial-admin-secret -o jsonpath="{.data.password}" | base64 -d
      register: argocd_admin_pw

    - name: Show ArgoCD credentials
      debug:
        msg: "ArgoCD admin password is: {{ argocd_admin_pw.stdout }}"
    - name: Ensure pip is installed
      apt:
        name: python3-pip
        state: present
        update_cache: true

    - name: Install python Kubernetes client
      pip:
        name: kubernetes
        executable: pip3

    - name: Create devops namespace
      kubernetes.core.k8s:
        api_version: v1
        kind: Namespace
        name: devops
        state: present
        kubeconfig: /etc/kubernetes/admin.conf

    - name: Add Helm repositories
      kubernetes.core.helm_repository:
        name: "{{ item.name }}"
        repo_url: "{{ item.url }}"
      loop:
        - { name: "jenkinsci", url: "https://charts.jenkins.io" }

    - name: Install Jenkins
      kubernetes.core.helm:
        name: jenkins
        chart_ref: jenkinsci/jenkins
        release_namespace: devops
        create_namespace: false
        state: present
        kubeconfig: /etc/kubernetes/admin.conf
        set_values:
          - value: server.service.type=NodePort