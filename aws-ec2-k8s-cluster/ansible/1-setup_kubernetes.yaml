- name: Setup single-node Kubernetes with Flannel and DevOps tools
  hosts: controller-etcd-0
  become: true

  tasks:
    - name: Disable swap temporarily
      command: swapoff -a

    - name: Remove swap from /etc/fstab
      replace:
        path: /etc/fstab
        regexp: '^.* swap .*$'
        replace: ''

    - name: Remove old Docker apt source list if it exists
      file:
        path: /etc/apt/sources.list.d/docker.list
        state: absent

    - name: Run apt update manually for debug
      shell: apt update
      register: apt_debug
      ignore_errors: yes

    - debug:
        var: apt_debug.stderr_lines

    - name: Add Docker GPG key to /usr/share/keyrings
      shell: |
        curl -fsSL https://download.docker.com/linux/ubuntu/gpg | gpg --dearmor -o /usr/share/keyrings/docker-archive-keyring.gpg
      args:
        creates: /usr/share/keyrings/docker-archive-keyring.gpg

    - name: Add Docker apt repository with signed-by keyring
      apt_repository:
        repo: "deb [arch=amd64 signed-by=/usr/share/keyrings/docker-archive-keyring.gpg] https://download.docker.com/linux/ubuntu {{ ansible_distribution_release }} stable"
        state: present
        filename: docker

    - name: Install containerd
      apt:
        name: containerd.io
        state: present
        update_cache: yes

    - name: Generate containerd config.toml
      shell: containerd config default > /etc/containerd/config.toml
      args:
        creates: /etc/containerd/config.toml

    - name: Remove CRI-disabled line from containerd config
      lineinfile:
        path: /etc/containerd/config.toml
        regexp: '^disabled_plugins = \["cri"\]'
        state: absent

    - name: Restart containerd
      systemd:
        name: containerd
        state: restarted
        enabled: true

    - name: Enable br_netfilter module
      modprobe:
        name: br_netfilter
        state: present

    - name: Set Kubernetes-related sysctl params
      sysctl:
        name: "{{ item.name }}"
        value: "{{ item.value }}"
        state: present
        reload: yes
      loop:
        - { name: "net.bridge.bridge-nf-call-iptables", value: "1" }
        - { name: "net.ipv4.ip_forward", value: "1" }

    - name: Install required packages
      apt:
        name:
          - apt-transport-https
          - ca-certificates
          - curl
          - gnupg
          - lsb-release
        state: present
        update_cache: yes

    - name: Ensure clean APT sources
      shell: rm -f /etc/apt/sources.list.d/kubernetes.list

    - name: Add Kubernetes GPG key
      shell: |
        curl -fsSL https://pkgs.k8s.io/core:/stable:/v1.29/deb/Release.key | \
        gpg --dearmor -o /etc/apt/keyrings/kubernetes-archive-keyring.gpg
      args:
        creates: /etc/apt/keyrings/kubernetes-archive-keyring.gpg

    - name: Add Kubernetes apt repository
      apt_repository:
        repo: "deb [signed-by=/etc/apt/keyrings/kubernetes-archive-keyring.gpg] https://pkgs.k8s.io/core:/stable:/v1.29/deb/ /"
        state: present
        filename: kubernetes

    - name: Install Kubernetes tools
      apt:
        name:
          - kubelet
          - kubeadm
          - kubectl
        state: present
        update_cache: yes

    - name: Hold Kubernetes packages
      shell: apt-mark hold kubelet kubeadm kubectl

    - name: Ensure CNI config directory exists
      file:
        path: /etc/cni/net.d
        state: directory

    - name: Pre-populate Flannel CNI config
      copy:
        dest: /etc/cni/net.d/10-flannel.conflist
        content: |
          {
            "cniVersion": "0.3.1",
            "name": "cbr0",
            "plugins": [
              {
                "type": "flannel",
                "delegate": {
                  "hairpinMode": true,
                  "isDefaultGateway": true
                }
              },
              {
                "type": "portmap",
                "capabilities": {"portMappings": true},
                "snat": true
              }
            ]
          }

    - name: Initialize Kubernetes cluster
      shell: kubeadm init --pod-network-cidr=10.244.0.0/16
      args:
        creates: /etc/kubernetes/admin.conf

    - name: Set kubeconfig for ubuntu user
      shell: |
        mkdir -p /home/ubuntu/.kube && \
        cp /etc/kubernetes/admin.conf /home/ubuntu/.kube/config && \
        chown ubuntu:ubuntu /home/ubuntu/.kube/config
      args:
        creates: /home/ubuntu/.kube/config

    - name: Remove control-plane taints (allow pods on master)
      shell: |
        kubectl taint nodes --all node-role.kubernetes.io/master- || true
        kubectl taint nodes --all node-role.kubernetes.io/control-plane:NoSchedule- || true

    - name: Install Flannel CNI
      shell: kubectl apply --validate=false -f https://raw.githubusercontent.com/coreos/flannel/master/Documentation/kube-flannel.yml
      register: flannel_result
      until: flannel_result.rc == 0
      retries: 5
      delay: 10

    - name: Wait for kube-apiserver to be ready on port 6443
      wait_for:
        port: 6443
        host: 127.0.0.1
        timeout: 90
        state: started

    - name: Install Helm
      shell: curl https://raw.githubusercontent.com/helm/helm/main/scripts/get-helm-3 | bash
      args:
        creates: /usr/local/bin/helm

    - name: Create devops namespace
      kubernetes.core.k8s:
        api_version: v1
        kind: Namespace
        name: devops
        state: present

    - name: Add Helm repositories
      kubernetes.core.helm_repository:
        name: "{{ item.name }}"
        repo_url: "{{ item.url }}"
      loop:
        - { name: "jenkinsci", url: "https://charts.jenkins.io" }
        - { name: "argo", url: "https://argoproj.github.io/argo-helm" }
        - { name: "ingress-nginx", url: "https://kubernetes.github.io/ingress-nginx" }
        - { name: "jetstack", url: "https://charts.jetstack.io" }

    - name: Install Jenkins
      kubernetes.core.helm:
        name: jenkins
        chart_ref: jenkinsci/jenkins
        release_namespace: devops
        create_namespace: false
        state: present

    - name: Install ArgoCD
      kubernetes.core.helm:
        name: argocd
        chart_ref: argo/argo-cd
        release_namespace: devops
        state: present

    - name: Install ingress-nginx
      kubernetes.core.helm:
        name: ingress-nginx
        chart_ref: ingress-nginx/ingress-nginx
        release_namespace: ingress-nginx
        create_namespace: true
        state: present

    - name: Install cert-manager
      kubernetes.core.helm:
        name: cert-manager
        chart_ref: jetstack/cert-manager
        release_namespace: cert-manager
        create_namespace: true
        set_values:
          - value: installCRDs=true
