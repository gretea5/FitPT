- name: Setup DevOps tools with Helm and enable HTTPS ingress
  hosts: _controller_etcd
  become: yes
  vars:
    namespace: devops
    domain_jenkins: jenkins.example.com      # ← 실제 도메인으로 교체
    domain_argocd: argocd.example.com        # ← 실제 도메인으로 교체
    email: kkt3289@gmail.com            # ← Let's Encrypt 인증용 이메일

  tasks:
    - name: Create namespace
      kubernetes.core.k8s:
        api_version: v1
        kind: Namespace
        name: "{{ namespace }}"
        state: present

    - name: Add Helm repo - Jenkins
      kubernetes.core.helm_repository:
        name: jenkinsci
        repo_url: https://charts.jenkins.io

    - name: Install Jenkins
      kubernetes.core.helm:
        name: jenkins
        chart_ref: jenkinsci/jenkins
        release_namespace: "{{ namespace }}"
        create_namespace: false
        state: present

    - name: Add Helm repo - ArgoCD
      kubernetes.core.helm_repository:
        name: argo
        repo_url: https://argoproj.github.io/argo-helm

    - name: Install ArgoCD
      kubernetes.core.helm:
        name: argocd
        chart_ref: argo/argo-cd
        release_namespace: "{{ namespace }}"
        state: present

    - name: Add ingress-nginx repo
      kubernetes.core.helm_repository:
        name: ingress-nginx
        repo_url: https://kubernetes.github.io/ingress-nginx

    - name: Install ingress-nginx
      kubernetes.core.helm:
        name: ingress-nginx
        chart_ref: ingress-nginx/ingress-nginx
        release_namespace: ingress-nginx
        create_namespace: true
        state: present

    - name: Add cert-manager repo
      kubernetes.core.helm_repository:
        name: jetstack
        repo_url: https://charts.jetstack.io

    - name: Install cert-manager
      kubernetes.core.helm:
        name: cert-manager
        chart_ref: jetstack/cert-manager
        release_namespace: cert-manager
        create_namespace: true
        set_values:
          - value: installCRDs=true

    - name: Create Let's Encrypt ClusterIssuer
      kubernetes.core.k8s:
        state: present
        definition:
          apiVersion: cert-manager.io/v1
          kind: ClusterIssuer
          metadata:
            name: letsencrypt-prod
          spec:
            acme:
              server: https://acme-v02.api.letsencrypt.org/directory
              email: "{{ email }}"
              privateKeySecretRef:
                name: letsencrypt-prod
              solvers:
                - http01:
                    ingress:
                      class: nginx

    - name: Create HTTPS Ingress for ArgoCD
      kubernetes.core.k8s:
        state: present
        definition:
          apiVersion: networking.k8s.io/v1
          kind: Ingress
          metadata:
            name: argocd-ingress
            namespace: "{{ namespace }}"
            annotations:
              cert-manager.io/cluster-issuer: "letsencrypt-prod"
              nginx.ingress.kubernetes.io/ssl-redirect: "true"
              nginx.ingress.kubernetes.io/backend-protocol: "HTTPS"
          spec:
            tls:
              - hosts:
                  - "{{ domain_argocd }}"
                secretName: argocd-tls
            rules:
              - host: "{{ domain_argocd }}"
                http:
                  paths:
                    - path: /
                      pathType: Prefix
                      backend:
                        service:
                          name: argocd-server
                          port:
                            number: 443

    - name: Create HTTPS Ingress for Jenkins
      kubernetes.core.k8s:
        state: present
        definition:
          apiVersion: networking.k8s.io/v1
          kind: Ingress
          metadata:
            name: jenkins-ingress
            namespace: "{{ namespace }}"
            annotations:
              cert-manager.io/cluster-issuer: "letsencrypt-prod"
              nginx.ingress.kubernetes.io/ssl-redirect: "true"
          spec:
            tls:
              - hosts:
                  - "{{ domain_jenkins }}"
                secretName: jenkins-tls
            rules:
              - host: "{{ domain_jenkins }}"
                http:
                  paths:
                    - path: /
                      pathType: Prefix
                      backend:
                        service:
                          name: jenkins
                          port:
                            number: 8080
